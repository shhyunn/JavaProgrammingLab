package restaurantRankingProgram;

import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Random;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.border.EmptyBorder;

import javax.swing.SwingConstants;
import java.awt.Font;
import java.awt.Color;

public class participatePage extends JFrame {
    // 멤버 변수 및 초기화 (생략)
	private JPanel contentPane;
	private ArrayList<restaurant> initList;
	private ArrayList<restaurant> resList;
	private ArrayList<restaurant> currResList;
	private restaurant winner;

	private JPanel titlePane;
	private JPanel mainPane;
	
	private JButton resBtn1;
	private JButton resBtn2;
	private int round;
	
	private JLabel vsLabel;
	private JLabel roundLabel;
	
	private JLabel resLabel1;
	private JLabel resLabel2;
	
    public participatePage() {
    	setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); 
		setBounds(50, 50, 700, 500);
		setTitle("Sungkyun's Ranking");
		contentPane = new JPanel(new BorderLayout());
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		JLabel title = new JLabel("SungKyun's Ranking");
		title.setHorizontalAlignment(SwingConstants.CENTER);
		title.setForeground(new Color(64, 128, 128));
		title.setFont(new Font("Arial Black", Font.BOLD, 30));
		JLabel epty = new JLabel();
		JLabel comment = new JLabel("----------- Select yout Pick! -----------");
		comment.setHorizontalAlignment(SwingConstants.CENTER);
		comment.setFont(new Font("Arial Black", Font.BOLD, 28));
		titlePane = new JPanel(new GridLayout(3,1));
		titlePane.add(title);
		titlePane.add(epty);
		titlePane.add(comment);
		contentPane.add(titlePane, BorderLayout.NORTH);
		
		
		mainPane = new JPanel(new GridLayout(1,3));
		JPanel resPane1 = new JPanel(new BorderLayout());
		JPanel resPane2 = new JPanel(new BorderLayout());
		resBtn1 = new JButton("");
		resLabel1 = new JLabel("");
		resLabel1.setFont(new Font("휴먼엑스포", Font.BOLD, 15));
		resLabel1.setHorizontalAlignment(SwingConstants.CENTER);
		resBtn2 = new JButton("");
		resLabel2 = new JLabel("");
		resLabel2.setFont(new Font("휴먼엑스포", Font.BOLD, 15));
		resLabel2.setHorizontalAlignment(SwingConstants.CENTER);
		
		resPane1.add(resLabel1, BorderLayout.NORTH);
		resPane1.add(resBtn1, BorderLayout.CENTER);
		
		resPane2.add(resLabel2, BorderLayout.NORTH);
		
		resPane2.add(resBtn2, BorderLayout.CENTER);
		mainPane.add(resPane1);
		
		JPanel vsPane = new JPanel(new GridLayout(4,1));
		vsLabel = new JLabel("vs");
		vsLabel.setFont(new Font("Arial Black", Font.BOLD, 30));
		vsLabel.setHorizontalAlignment(SwingConstants.CENTER);
		vsPane.add(new JLabel(""));
		roundLabel = new JLabel("Quater-final");
		roundLabel.setHorizontalAlignment(SwingConstants.CENTER);
		roundLabel.setFont(new Font("Arial Black", Font.BOLD, 20));
		roundLabel.setForeground(new Color(255, 0, 0));
		vsPane.add(roundLabel);
		vsPane.add(vsLabel);
		vsPane.add(new JLabel(""));
		mainPane.add(vsPane);
		mainPane.add(resPane2);
		
		contentPane.add(mainPane, BorderLayout.CENTER);
		JPanel bottomPane = new JPanel(new BorderLayout());
		JButton blankButton = new JButton("------------------------------");
		blankButton.setBackground(new Color(64, 128, 128));

		JLabel imageLabel = new JLabel("");
		bottomPane.add(blankButton, BorderLayout.NORTH);
		bottomPane.add(imageLabel, BorderLayout.CENTER);
		
		contentPane.add(bottomPane, BorderLayout.SOUTH);
		
		setContentPane(contentPane);
    	initList = programData.getInstance().getRestaurantList();
    	resList = new ArrayList<restaurant>(initList);
    	currResList = new ArrayList<restaurant>();
    	round = 0;
        
    	startGame();
    }

    public void startGame() {
        // 게임 시작
        selectRandomRestaurants();
        
        resBtn1.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				handleButtonClick(resLabel1);
				
			}
        	
        });
        
        resBtn2.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				handleButtonClick(resLabel2);
				
			}
        	
        });
    }

    private int selectRandomRestaurants() {
        // 랜덤으로 레스토랑 선택 및 버튼 설정 (생략)
    	round +=1;
    	if (resList.isEmpty()) {
    	    resList = new ArrayList<restaurant>();
    	    resList.addAll(currResList);
    	    currResList.clear();
    	    if (resList.size() == 4) {
    	    	roundLabel.setText("Semi-final");
    	    }
    	    else if (resList.size() == 2) {
    	    	roundLabel.setText("Final");
    	    }
    	}
    	
    	if (resList.size() <=1) {
    		winner = resList.get(0);
   		 	JOptionPane.showMessageDialog(this, "Winner: " + winner.getRestaurantName(), "Game Over", JOptionPane.INFORMATION_MESSAGE);
   		 	setVisible(false);
   		 	return 0;
    	}
    			
    	Random random = new Random();
    	int idx1 = random.nextInt(resList.size());
    	int idx2 = random.nextInt(resList.size());
    	
    	while (idx2 == idx1) {
    		idx2 = random.nextInt(resList.size());
    	}
    	
    	restaurant res1 = resList.get(idx1);
    	restaurant res2 = resList.get(idx2);
    	
    	resList.remove(res1);
    	resList.remove(res2);
    	
    	/*
    	if (debug == 1) {
    		JOptionPane.showMessageDialog(this,"debug", "Game Over", JOptionPane.INFORMATION_MESSAGE);
    		dispose();
    	};
    	*/
    	//num2.setActionCommand("2");

		ImageIcon picture1 = new ImageIcon(participatePage.class.getResource(res1.getImagePath()));
		Image image1 = picture1.getImage().getScaledInstance(200, 200, Image.SCALE_SMOOTH);
		ImageIcon scaledIcon1 = new ImageIcon(image1);

		ImageIcon picture2 = new ImageIcon(participatePage.class.getResource(res2.getImagePath()));
		Image image2 = picture2.getImage().getScaledInstance(200, 200, Image.SCALE_SMOOTH);
		ImageIcon scaledIcon2 = new ImageIcon(image2);
		
		resBtn1.setIcon(scaledIcon1);
    	//resBtn1.setText(res1.getRestaurantName());
    	resLabel1.setText(res1.getRestaurantName());
    	
    	resBtn2.setIcon(scaledIcon2);
    	//resBtn2.setText(res2.getRestaurantName());
    	resLabel2.setText(res2.getRestaurantName());
    	return 0;

        // 스레드 생성 및 실행
        //GameThread gameThread = new GameThread();
        //gameThread.start();
    }
    
    private void handleButtonClick(JLabel resLabel) {
    	String selectName = resLabel.getText();
    	restaurant selectRestaurant = null;
    	
    	for (restaurant res : initList) {
    		if (res.getRestaurantName().equals(selectName)) {
    			selectRestaurant = res;
    			break;
    		}
    	}
    	currResList.add(selectRestaurant);
    	selectRandomRestaurants();
  
    }
/*
    private class GameThread extends Thread {
        @Override
        public void run() {
            // 선택 시간 지연
            try {
                Thread.sleep(2000);
                
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            // 선택된 레스토랑 처리 (생략)

            // 예시: 다음 라운드로 진행
            if (currentRoundRestaurants.size() == 1) {
                // 최종 우승자 결정
                winner = currentRoundRestaurants.get(0);
                showWinnerMessage(winner);
                dispose(); // 게임 종료
            } else {
                selectRandomRestaurants();
            }
        }
    }
*/
    
    private void showWinnerMessage(restaurant winner) {
        // 우승자 메시지 표시 (생략)
    }

    
}
