package restaurantRankingProgram;

import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.border.EmptyBorder;
import java.awt.Font;
import java.awt.Color;

public class managerPage extends JFrame {

	private JPanel contentPane;
	private JButton saveBtn;
	private JTextArea answerContent;
	
	public managerPage() {
		setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		setBounds(100, 100, 700, 600);
		setTitle("Manager Page");
		contentPane = new JPanel(new BorderLayout());
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		
		JLabel titlePane = new JLabel("From Manager To Customer");
		titlePane.setFont(new Font("Rockwell Extra Bold", Font.BOLD, 20));
		contentPane.add(titlePane, BorderLayout.NORTH);
		
		JPanel mainPane = new JPanel(new GridLayout(2,1));
		JPanel subPane1 = new JPanel(new BorderLayout());
		JLabel titleList = new JLabel("Request List");
		titleList.setFont(new Font("Arial Black", Font.PLAIN, 15));
		JTextArea listContent = new JTextArea();
		//파일 가져와서 읽어오기
		try {
            FileReader fileReader = new FileReader("request.txt");
            BufferedReader bufferedReader = new BufferedReader(fileReader);
            StringBuilder stringBuilder = new StringBuilder();
            String line;
            while ((line = bufferedReader.readLine()) != null) {
                stringBuilder.append(line).append("\n");
            }
            bufferedReader.close();
            listContent.setText(stringBuilder.toString());
            
        } catch (IOException ex) {
            ex.printStackTrace();
        } catch (Exception e) {
        	listContent.setText("");
        }
		
		listContent.setEditable(false);
		JScrollPane scrollPane1 = new JScrollPane(listContent);
		
		subPane1.add(titleList, BorderLayout.NORTH);
		subPane1.add(scrollPane1, BorderLayout.CENTER);
		
		JPanel subPane2 = new JPanel(new BorderLayout());
		JLabel titleAnswer = new JLabel("Your Answer");
		titleAnswer.setFont(new Font("Arial Black", Font.BOLD, 15));
		answerContent = new JTextArea();
		JScrollPane scrollPane2 = new JScrollPane(answerContent);
		subPane2.add(titleAnswer, BorderLayout.NORTH);
		subPane2.add(scrollPane2, BorderLayout.CENTER);
		
		mainPane.add(subPane1);
		mainPane.add(subPane2);
		
		contentPane.add(mainPane, BorderLayout.CENTER);
		
		JPanel btnPane = new JPanel(new GridLayout(3,1));
		btnPane.add(new JLabel(""));
		saveBtn = new JButton("SAVE");
		ButtonHandler handler = new ButtonHandler();
		saveBtn.addActionListener(handler);
		//버튼 이벤트리스너 추가& answer 저장
		saveBtn.setForeground(new Color(64, 128, 128));
		saveBtn.setFont(new Font("Arial Black", Font.BOLD, 20));
		JPanel subBtnPane = new JPanel(new GridLayout(1,3));
		subBtnPane.add(new JLabel(""));
		subBtnPane.add(saveBtn);
		subBtnPane.add(new JLabel(""));
		btnPane.add(subBtnPane);
		btnPane.add(new JLabel(""));
		
		contentPane.add(btnPane, BorderLayout.SOUTH);
		
		setContentPane(contentPane);
	}
	
	class ButtonHandler implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent e) {
			if (e.getSource() == saveBtn) {
				writeText();
				JOptionPane.showMessageDialog(null, "Your answer is saved.", "Notification", JOptionPane.INFORMATION_MESSAGE);
			}
			
		}
		
	}
	
	public void writeText() {
		try {
			
			String answerValue = answerContent.getText();
            String write = String.format("answer: %s\n", answerValue);

            File file = new File("request.txt");
            FileWriter fileWriter;
            
            if (file.exists()) {
                fileWriter = new FileWriter(file, true); // 기존 파일에 이어쓰기
                
            } else {
                fileWriter = new FileWriter(file); // 새 파일 생성
            }

            BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);
            PrintWriter writer = new PrintWriter(bufferedWriter);

            writer.println(write);
            writer.close();
            
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}
